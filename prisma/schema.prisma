// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  username   String   @unique
  name       String
  bio        String?  @db.Text //somente para o mysql, para identificar campos que precisam tem mais de 191 caracteres
  email      String?  @unique
  avatar_url String?
  created_at DateTime @default(now())

  accounts      Account[]
  sessions      Session[]
  timeIntervals UserTimeInterval[]
  Scheduling    Scheduling[]

  @@map("users")
}

// configurando adapter para Prisma
//  integração de um usuário com um provider (um account para o google e outro para github, por exemplo)
model Account {
  id                  String  @id @default(cuid())
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String? @db.Text //somente para o mysql, para identificar campos que precisam tem mais de 191 caracteres
  access_token        String? @db.Text //somente para o mysql, para identificar campos que precisam tem mais de 191 caracteres
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String? @db.Text //somente para o mysql, para identificar campos que precisam tem mais de 191 caracteres
  session_state       String?
  user                User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

// logins em máquinas disferentes geram uma nova sessão
model Session {
  id            String   @id @default(cuid())
  session_token String   @unique
  user_id       String
  expires       DateTime
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model UserTimeInterval {
  id                    String @id @default(uuid())
  week_day              Int
  time_start_in_minutes Int
  time_end_in_minutes   Int

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  @@map("user_time_intervals")
}

model Scheduling {
  id           String   @id @default(uuid())
  date         DateTime
  name         String
  email        String
  observations String?
  created_at   DateTime @default(now())

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  @@map("schedulings")
}
